# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from dart-as.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyObject, CPyObject, CPyObjectProxy, CPyPrimitive, CPyString

from DartAnalysisServerListener import DartAnalysisServerListener
from DartAnalysisServerListener import DartAnalysisServerListenerHelper
from abc import ABCMeta, abstractmethod
from dh__list_string import ListStringHelper
from dh__map_string_string import MapStringStringHelper
from dh__map_string_string import MapStringStringProxy
from future.utils import with_metaclass
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class DartAnalysisServer(with_metaclass(ABCMeta)):
    @abstractmethod
    def start(self, listener):
        raise NotImplementedError

    @abstractmethod
    def stop(self):
        raise NotImplementedError

    @abstractmethod
    def set_analysis_roots(self, included, excluded, package_roots):
        raise NotImplementedError

    @abstractmethod
    def set_priority_files(self, files):
        raise NotImplementedError

    @abstractmethod
    def update_content(self, file, content):
        raise NotImplementedError

    @abstractmethod
    def get_suggestions(self, file, offset):
        raise NotImplementedError

    @staticmethod
    def create(dart_bin_path, log_file):
        return DartAnalysisServerCppProxy.create(dart_bin_path, log_file)

class DartAnalysisServerCppProxy(DartAnalysisServer):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.DartAnalysisServer___wrapper_dec_ref(self._cpp_impl)

    @staticmethod
    def create(dart_bin_path, log_file):
        with CPyString.fromPy(dart_bin_path) as pys_dart_bin_path,\
                CPyString.fromPyOpt(log_file) as pyopt_log_file:
            _ret_c = lib.cw__DartAnalysisServer_create(pys_dart_bin_path.release_djinni_string(), pyopt_log_file.release_djinni_string())
            CPyException.toPyCheckAndRaise(_ret_c)
            _ret = DartAnalysisServerHelper.toPy(_ret_c)
            assert _ret is not None
            return _ret

    def start(self, listener):
        lib.cw__DartAnalysisServer_start(self._cpp_impl, DartAnalysisServerListenerHelper.fromPy(listener))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def stop(self):
        lib.cw__DartAnalysisServer_stop(self._cpp_impl)
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def set_analysis_roots(self, included, excluded, package_roots):
        _ret_c = lib.cw__DartAnalysisServer_set_analysis_roots(self._cpp_impl, CPyObject.fromPy(ListStringHelper.c_data_set, included), CPyObject.fromPy(ListStringHelper.c_data_set, excluded), CPyObjectProxy.fromPy(MapStringStringHelper.c_data_set, MapStringStringProxy(package_roots)))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyPrimitive.toPy(_ret_c)
        assert _ret is not None
        return _ret

    def set_priority_files(self, files):
        _ret_c = lib.cw__DartAnalysisServer_set_priority_files(self._cpp_impl, CPyObject.fromPy(ListStringHelper.c_data_set, files))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = CPyPrimitive.toPy(_ret_c)
        assert _ret is not None
        return _ret

    def update_content(self, file, content):
        with CPyString.fromPy(file) as pys_file,\
                CPyString.fromPy(content) as pys_content:
            _ret_c = lib.cw__DartAnalysisServer_update_content(self._cpp_impl, pys_file.release_djinni_string(), pys_content.release_djinni_string())
            CPyException.toPyCheckAndRaise(_ret_c)
            _ret = CPyPrimitive.toPy(_ret_c)
            assert _ret is not None
            return _ret

    def get_suggestions(self, file, offset):
        with CPyString.fromPy(file) as pys_file:
            _ret_c = lib.cw__DartAnalysisServer_get_suggestions(self._cpp_impl, pys_file.release_djinni_string(), CPyPrimitive.fromPy(offset))
            CPyException.toPyCheckAndRaise(_ret_c)
            _ret = CPyPrimitive.toPy(_ret_c)
            assert _ret is not None
            return _ret

class DartAnalysisServerHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        return DartAnalysisServerCppProxy(obj)

